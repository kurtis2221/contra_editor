<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAgAQAAAAAAAAAAAAAAAEAAAAA
        AAAAAAAASDwYAFBIEABYTBAAUEgYAFhMGABoWBAAYFAYAGBUGABQSCAAWEwoAFhQIABYVDAAYFQgAGhc
        IABgWCgAcFwoAGhUMABoXDgAcGAgAGhgMABwaDAAcGQ4AHBoOAAAAFAAAAxYAAAAYAAACGAAAABoAAAQ
        aAAADHgAABRwAAAQeAAAHHgAEBxwABgccAAYFHgAIBhgACAcaAAYKHgAMDhgACAgcAAoJHgAIDB4ADA0
        cAAwPHgAYFxAAHBoQAB4cEAAcGhQAHhwUAB4cFgASFh4AHh0YABoYHgAcGxwAHhweACAdEgAgHhQAIB4
        WACAfFgAiHxYAIB4eACIgFAAqJhYAIiEaACQjGAAmJRgAICAcACIhHAAgIB4AJCIeACgkGgAsKR4AAAI
        gAAADIgAABCAAAAciAAAAJgAABCQAAAUkAAAGJAAABCYAAAoiAAQIIAAECyAABgsgAAQJIgAGCyIAAAs
        kAAAIJgAADCYABA8kAAoNIAAODyIACg0mAAAEKAAABCoABAcoAAADLgAADygABAwqAAAILAAIDCwACA0
        uAAoQIgAOEiAADhIiAA4SJAAOEiYADhggAAAVKgAEFywABhcsAAwaKAAMGyoADBwsABQSIgAWFiAAFBU
        iABYXIgASFyQAEBQmABIUJgAYFyIAFhkmABgYIAAaGSAAGBsiABwbIgAeHiAAHh0iAB4fIgAYGyQAHBo
        kAB4fJAAcHiYAEBcqABARLAASECwAEhUsABQXLgAUGSoAEh0qABIaLAAaHCoAHB4qAB4fKgAYGywAAAA
        wAAADMAAABTAAAAUyAAAGMgAABzIAAAM0AAAENAAACzIAAAwyAAAINgAEDzQAAA86AAQOOgAAETIAABA
        0AAASNAAAFDQAABU0AAAXNAAAFjYADhAyAA4TNAAMFTYADBc2AAAZMAAEGTAABBsyAAAYNAAAGjYAAB4
        0AAAfNAAAHDYAABg4AAAbOgAAHTgAAB46ABQUMgAQGDAAGBw0ABgeNAAQIS4AFiAsABwhKgAcISwAACA
        2AAAlNgAAITgAACM4AAAlOgAeIjAAGigyACQjIAAkICIAIiAkACQjJgAmJyQAKCUgACgnJAAgISgAIiI
        oACIgKgAiIioAJCMqACYlKAAoJygAKCYqACgmLAAqKSoALCkoACgoLAAqKiwAKikuACwpLAAuLiwALCw
        uADAuLgA0LywAMjAuAC4uMAAyLjAAMjEyADYyMAA0MTIANDMyADYyMgA2MzIANjM0ADY1NAA2NjYAODc
        yADg2NAA4NzYAOjk4ADw7OgA8PDwAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAFLwsWMjU7DwULAAAAAAAAAAAAAAAAAAAAAAAAAAAIDjOShH1pVF2ARUcX
        OgAAAAAAAAAAAAAAAAAAAAUNOX96Kx4hHhsfGhsdIyxFQQIAAAAAAAAAAAAAAAAFOz+IUlBNHxwbIiJ4
        fHgZGBgqRBQAAAAAADwAAAAACzeNeU0gIR5eg9HX4enu6ePVfiYpdhIJCgsMMQAAAA1CgUxSVSEbdt/u
        AAAAAAAAAAAA7eDc5Nbg3NzmAAAANm1+WCJMJ9XpAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCUS0vczCTf
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOoVPfuTy4wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADPVmpA
        AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEFlSIaHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEE8
        e0tsYtMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALkVrTVFPzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADJgl9SYB7ZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIE2aVFVJd4AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAANlhVUjTe3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBV2FNbDoAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADhPWk1nOgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2CBTWlJoRgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADtLWBaYGM3AwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQoY2NZULo6FAAAAAAA
        AAAAAAAAAAITEwUAAAAAAAAAz3dKWmZaYdE/BAAAAAAAAAAAAAAHzb28yxAAAAAAAAAA8pJOYFpbZoo9
        DQAAAAAAAAAAB3+iqbe4kRYAAAAAAAAA73VgnWZhl4xDAwAAAAAAAAY+oaOXqMW5kRAAAAAAAAAA8Eyc
        paNjmKo+MAYGDgYV0q2ao6ayw7iwEQAAAAAAAAAAx5hmnpaenKCsu46LkKufmp6kpcLGxsLKAAAAAAAA
        AABJiZWdpJanpZmam5ubn5qWnsPCxbPEXOEAAAAAAAAAzjdxo5+kspaamZ6npJ6ksZ21tLPI5b/oAAAA
        AAAAAAAA6dtyZKixnZamnrKosrXExrST0+EA8AAAAAAAAAAAAAAAAPHibqizqba4tbLFo6++1O/0AAAA
        AAAAAAAAAAAAAAAAAADawcBwb3OPrnTQ6+cAAAAAAAAAAAAAAAAAAAAAAAAAAADz6+rq6+/d7PMAAAAA
        AAAAAAAAAAAAAP/gB///gAH//AAAf/gAAD7wAAAA4AP+AOAP///AAGB/wEDgP8Hf5x/B3+ffAd/n3wHB
        598BweffAcHn3wHf598D3+ffAd/nHwHA4D8AwGB/AH/4fwA/8D+AH+AfwA/AD+AAAA/wAAAP8AAAD+AA
        AB/wAAC//AAB//8AD///gD//
</value>
  </data>
</root>